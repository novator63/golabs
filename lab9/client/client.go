package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
)

type User struct {
	ID       int    `json:"id"`
	Name     string `json:"name"`
	Age      int    `json:"age"`
	Username string `json:"username"`
	Password string `json:"password,omitempty"`
}

const baseURL = "http://localhost:8080"

var userTokens = make(map[string]string) // username ‚Üí token
var currentUser string                   // –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

func main() {
	for {
		fmt.Println("\n=== –ö–õ–ò–ï–ù–¢ REST API ===")
		fmt.Println("1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ª–æ–≥–∏–Ω)")
		fmt.Println("2. –°–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		fmt.Println("3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		fmt.Println("4. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID")
		fmt.Println("5. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		fmt.Println("6. –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		fmt.Println("7. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		fmt.Println("8. –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã")
		fmt.Println("0. –í—ã—Ö–æ–¥")

		fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
		var choice int
		fmt.Scan(&choice)

		switch choice {
		case 1:
			login()
		case 2:
			switchUser()
		case 3:
			getAllUsers()
		case 4:
			getUserByID()
		case 5:
			createUser()
		case 6:
			updateUser()
		case 7:
			deleteUser()
		case 8:
			printTokens()
		case 0:
			fmt.Println("–í—ã—Ö–æ–¥.")
			os.Exit(0)
		default:
			fmt.Println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
		}
	}
}

// ---------------- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ----------------
func login() {
	var username, password string
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
	fmt.Scan(&username)
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
	fmt.Scan(&password)

	data, _ := json.Marshal(map[string]string{
		"username": username,
		"password": password,
	})

	resp, err := http.Post(baseURL+"/login", "application/json", bytes.NewBuffer(data))
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞:", err)
		return
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)
	if resp.StatusCode != 200 {
		fmt.Println("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", string(body))
		return
	}

	var result map[string]string
	json.Unmarshal(body, &result)
	token := result["token"]

	userTokens[username] = token
	currentUser = username

	fmt.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '%s' –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.\n", username)
	fmt.Printf("–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s\n", token)
}

// ---------------- –°–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------------
func switchUser() {
	if len(userTokens) == 0 {
		fmt.Println("–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
		return
	}

	fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
	for u := range userTokens {
		fmt.Println("-", u)
	}
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ")
	var name string
	fmt.Scan(&name)

	if _, ok := userTokens[name]; !ok {
		fmt.Println("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
		return
	}

	currentUser = name
	fmt.Printf("üîÑ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n", currentUser)
}

// ---------------- CRUD ----------------
func getAllUsers() {
	req, _ := http.NewRequest("GET", baseURL+"/users", nil)
	addAuth(req)
	send(req)
}

func getUserByID() {
	var id int
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID: ")
	fmt.Scan(&id)
	req, _ := http.NewRequest("GET", fmt.Sprintf("%s/users/%d", baseURL, id), nil)
	addAuth(req)
	send(req)
}

func createUser() {
	var u User
	fmt.Print("–ò–º—è: ")
	fmt.Scan(&u.Name)
	fmt.Print("–í–æ–∑—Ä–∞—Å—Ç: ")
	fmt.Scan(&u.Age)
	fmt.Print("–õ–æ–≥–∏–Ω: ")
	fmt.Scan(&u.Username)
	fmt.Print("–ü–∞—Ä–æ–ª—å: ")
	fmt.Scan(&u.Password)

	data, _ := json.Marshal(u)
	req, _ := http.NewRequest("POST", baseURL+"/users", bytes.NewBuffer(data))
	req.Header.Set("Content-Type", "application/json")
	addAuth(req)
	send(req)
}

func updateUser() {
	var id int
	var u User
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ")
	fmt.Scan(&id)
	fmt.Print("–ù–æ–≤–æ–µ –∏–º—è: ")
	fmt.Scan(&u.Name)
	fmt.Print("–ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ")
	fmt.Scan(&u.Age)

	data, _ := json.Marshal(u)
	req, _ := http.NewRequest("PUT", fmt.Sprintf("%s/users/%d", baseURL, id), bytes.NewBuffer(data))
	req.Header.Set("Content-Type", "application/json")
	addAuth(req)
	send(req)
}

func deleteUser() {
	var id int
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
	fmt.Scan(&id)
	req, _ := http.NewRequest("DELETE", fmt.Sprintf("%s/users/%d", baseURL, id), nil)
	addAuth(req)
	send(req)
}

// ---------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------------
func addAuth(req *http.Request) {
	if currentUser == "" {
		fmt.Println("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
		return
	}
	token := userTokens[currentUser]
	req.Header.Set("Authorization", "Bearer "+token)
}

func send(req *http.Request) {
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞:", err)
		return
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)
	fmt.Printf("\n–û—Ç–≤–µ—Ç (%d): %s\n", resp.StatusCode, string(body))
}

func printTokens() {
	if len(userTokens) == 0 {
		fmt.Println("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
		return
	}
	fmt.Println("\n–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:")
	for user, token := range userTokens {
		active := ""
		if user == currentUser {
			active = "(–∞–∫—Ç–∏–≤–µ–Ω)"
		}
		fmt.Printf("- %s: %s %s\n", user, token, active)
	}
}
